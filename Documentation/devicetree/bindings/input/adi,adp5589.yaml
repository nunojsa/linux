# SPDX-License-Identifier: (GPL-2.0-only OR BSD-2-Clause)
%YAML 1.2
---
$id: http://devicetree.org/schemas/input/adi,adp5589.yaml#
$schema: http://devicetree.org/meta-schemas/core.yaml#

title: Analog Devices ADP5589 and similar Keypad Controllers

maintainers:
  - Nuno Sa <nuno.sa@analog.com>
  - Michael Hennerich <michael.hennerich@analog.com>

description: |
  Analog Devices Mobile I/O Expander and QWERTY Keypad Controllers
   - https://www.analog.com/media/en/technical-documentation/data-sheets/ADP5589.pdf
   - https://www.analog.com/media/en/technical-documentation/data-sheets/ADP5585.pdf

properties:
  compatible:
    enum:
      - adi,adp5589
      - adi,adp5585
      - adi,adp5585-2

  reg:
    maxItems: 1

  vcc-supply: true

  interrupts:
    maxItems: 1

  gpio-controller:
    description:
      This property applies if there are pins not used in the keypad.

  '#gpio-cells':
    const: 2

  interrupt-controller:
    description:
      This property applies if there are pins not used in the keypad.

  '#interrupt-cells':
    const: 2

  adi,cols-mask:
    description:
      Defines the number of pins (columns) being used ad part of the keymap. As
      the device is fully configurable and we can have holes in the columns
      being used, this is given as mask.
    $ref: /schemas/types.yaml#/definitions/uint32
    minimum: 0x1
    maximum: 0x3f

  adi,rows-mask:
    description:
      Defines the number of pins (rows) being used ad part of the keymap. As
      the device is fully configurable and we can have holes in the rows being
      used, this is given as mask.
    $ref: /schemas/types.yaml#/definitions/uint32
    minimum: 0x1
    maximum: 0xff

  adi,key-poll-ms:
    description: Configure time between consecutive scan cycles.
    enum: [10, 20, 30, 40]
    default: 10

  adi,unlock-keys:
    description:
      Specifies a maximum of 2 keys that can be used to unlock the keypad.
      If this property is set, the keyboard will be locked and only unlocked
      after these keys are pressed. The value 127 serves as a wildcard which
      means any key can be used for unlocking.
    $ref: /schemas/types.yaml#/definitions/uint32-array
    minItems: 1
    maxItems: 2
    items:
      anyOf:
        - minimum: 1
          maximum: 88
        - minimum: 97
          maximum: 115
        - const: 127

  adi,unlock-trigger-sec:
    description:
      Defines the time in which the second unlock event must occur after the
      first unlock event has occurred.
    maximum: 7
    default: 0

  adi,reset1-keys:
    description:
      Defines the trigger events (key presses) that can generate reset
      conditions one the reset1 block.
    $ref: /schemas/types.yaml#/definitions/uint32-array
    minItems: 1
    maxItems: 3
    items:
      anyOf:
        - minimum: 1
          maximum: 88
        - minimum: 97
          maximum: 115

  adi,reset2-keys:
    description:
      Defines the trigger events (key presses) that can generate reset
      conditions one the reset2 block.
    $ref: /schemas/types.yaml#/definitions/uint32-array
    minItems: 1
    maxItems: 2
    items:
      anyOf:
        - minimum: 1
          maximum: 88
        - minimum: 97
          maximum: 115

  adi,reset1-active-high:
    description: Sets the reset1 signal as active high.
    type: boolean

  adi,reset2-active-high:
    description: Sets the reset2 signal as active high.
    type: boolean

  adi,rst-passtrough-enable:
    description: Allows the RST pin to override (OR with) the reset1 signal.
    type: boolean

  adi,reset-trigger-ms:
    description:
      Defines the length of time that the reset events must be active before a
      reset signal is generated. All events must be active at the same time for
      the same duration.
    enum: [0, 1000, 1500, 2000, 2500, 3000, 3500, 4000]
    default: 0

  adi,reset-pulse-width-us:
    description: Defines the pulse width of the reset signals.
    enum: [500, 1000, 2000, 10000]
    default: 500

  '#address-cells':
    const: 1

  '#size-cells':
    const: 0

patternProperties:
  "^gpio@":
    type: object
    additionalProperties: false

    properties:
      reg:
        description: The GPIO number being configured.
        maximum: 18

      adi,pull-up-ohms:
        description: The pullup resistor to be used.
        enum: [100000, 300000]
        default: 300000

    required:
      - reg

dependencies:
  adi,rows-mask:
    - linux,keymap
    - adi,cols-mask
  adi,cols-mask:
    - linux,keymap
    - adi,rows-mask
  linux,keymap:
    - adi,rows-mask
    - adi,cols-mask
    - interrupts
  interrupt-controller:
    - interrupts
  adi,unlock-trigger-sec:
    - adi,unlock-keys
  adi,reset1-active-high:
    - adi,reset1-keys
  adi,rst-passtrough-enable:
    - adi,reset1-keys
  adi,reset2-active-high:
    - adi,reset2-keys

required:
  - compatible
  - reg
  - vcc-supply

allOf:
  - $ref: matrix-keymap.yaml#
  - $ref: input.yaml#
  - if:
      properties:
        compatible:
          enum:
            - adi,adp5585-2
    then:
      properties:
        adi,unlock-keys: false
        adi,unlock-trigger-sec: false
        adi,rows-mask:
          maximum: 0x2f
        adi,cols-mask:
          maximum: 0x1f
        adi,reset1-keys:
          items:
            anyOf:
              - minimum: 1
                maximum: 30
              - minimum: 37
                maximum: 47
        adi,reset2-keys:
          items:
            anyOf:
              - minimum: 1
                maximum: 30
              - minimum: 37
                maximum: 47
      patternProperties:
        "^gpio@":
          properties:
            reg:
              maximum: 10
  - if:
      properties:
        compatible:
          enum:
            - adi,adp5585
    then:
      properties:
        adi,unlock-keys: false
        adi,unlock-trigger-sec: false
        adi,rows-mask:
          maximum: 0x1f
        adi,cols-mask:
          maximum: 0x1f
        adi,reset1-keys:
          items:
            anyOf:
              - minimum: 1
                maximum: 25
              - enum: [37, 38, 39, 40, 41, 43, 44, 45, 46, 47]
        adi,reset2-keys:
          items:
            anyOf:
              - minimum: 1
                maximum: 25
              - enum: [37, 38, 39, 40, 41, 43, 44, 45, 46, 47]
      patternProperties:
        "^gpio@":
          properties:
            reg:
              enum: [0, 1, 2, 3, 4, 6, 7, 8, 9, 10]

unevaluatedProperties: false


examples:
  - |
    #include <dt-bindings/interrupt-controller/irq.h>
    #include <dt-bindings/input/input.h>
    i2c {
        #address-cells = <1>;
        #size-cells = <0>;

        keys@34 {
            compatible = "adi,adp5589";
            reg = <0x34>;

            vcc-supply = <&vcc>;
            interrupts = <21 IRQ_TYPE_EDGE_FALLING>;
            interrupt-parent = <&gpio>;

            adi,rows-mask = <0x13>;
            adi,cols-mask = <0xf>;

            linux,keymap = <
                MATRIX_KEY(0x00, 0x00, KEY_1)
                MATRIX_KEY(0x00, 0x01, KEY_2)
                MATRIX_KEY(0x00, 0x02, KEY_3)
                MATRIX_KEY(0x00, 0x03, KEY_4)
                MATRIX_KEY(0x01, 0x00, KEY_5)
                MATRIX_KEY(0x01, 0x01, KEY_6)
                MATRIX_KEY(0x01, 0x02, KEY_7)
                MATRIX_KEY(0x01, 0x03, KEY_8)
                MATRIX_KEY(0x04, 0x00, KEY_9)
                MATRIX_KEY(0x04, 0x01, KEY_A)
                MATRIX_KEY(0x04, 0x02, KEY_B)
                MATRIX_KEY(0x04, 0x03, KEY_C)
            >;

            #address-cells = <1>;
            #size-cells = <0>;

            gpio@10 {
                reg = <10>;
                adi,pull-up-ohms = <100000>;
            };
        };
    };
...
